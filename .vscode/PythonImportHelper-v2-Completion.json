[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "nextcord.ext",
        "description": "nextcord.ext",
        "isExtraImport": true,
        "detail": "nextcord.ext",
        "documentation": {}
    },
    {
        "label": "nextcord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nextcord",
        "description": "nextcord",
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "DMChannel",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "TextChannel",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Embed",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "DMChannel",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "TextChannel",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "SlashOption",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "TextChannel",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "SelectOption",
        "importPath": "nextcord",
        "description": "nextcord",
        "isExtraImport": true,
        "detail": "nextcord",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "nextcord.ext.commands",
        "description": "nextcord.ext.commands",
        "isExtraImport": true,
        "detail": "nextcord.ext.commands",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "nextcord.ext.commands",
        "description": "nextcord.ext.commands",
        "isExtraImport": true,
        "detail": "nextcord.ext.commands",
        "documentation": {}
    },
    {
        "label": "nextcord,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nextcord.",
        "description": "nextcord.",
        "detail": "nextcord.",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "QrPayCodeDTO",
        "importPath": "src.bot.DTO.qr_code_pay_dto",
        "description": "src.bot.DTO.qr_code_pay_dto",
        "isExtraImport": true,
        "detail": "src.bot.DTO.qr_code_pay_dto",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "NotImplementedType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "button",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "button",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "Modal",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "Modal",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "Modal",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "TextInput",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "Modal",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "nextcord.ui",
        "description": "nextcord.ui",
        "isExtraImport": true,
        "detail": "nextcord.ui",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "feedparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "feedparser",
        "description": "feedparser",
        "detail": "feedparser",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "FeedDTO",
        "importPath": "bot.DTO.feed_dto",
        "description": "bot.DTO.feed_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.feed_dto",
        "documentation": {}
    },
    {
        "label": "EmtyDTO",
        "importPath": "bot.DTO.emty_dto",
        "description": "bot.DTO.emty_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.emty_dto",
        "documentation": {}
    },
    {
        "label": "ColorDTO",
        "importPath": "bot.DTO.color_dto",
        "description": "bot.DTO.color_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.color_dto",
        "documentation": {}
    },
    {
        "label": "ChannelDTO",
        "importPath": "bot.DTO.channel_dto",
        "description": "bot.DTO.channel_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.channel_dto",
        "documentation": {}
    },
    {
        "label": "ServerDTO",
        "importPath": "bot.DTO.server_dto",
        "description": "bot.DTO.server_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.server_dto",
        "documentation": {}
    },
    {
        "label": "FeedEmtyDTO",
        "importPath": "bot.DTO.feed_emty_dto",
        "description": "bot.DTO.feed_emty_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.feed_emty_dto",
        "documentation": {}
    },
    {
        "label": "ChannelEmtyDTO",
        "importPath": "bot.DTO.channel_emty_dto",
        "description": "bot.DTO.channel_emty_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.channel_emty_dto",
        "documentation": {}
    },
    {
        "label": "ChannelFeedDTO",
        "importPath": "bot.DTO.channel_feed_dto",
        "description": "bot.DTO.channel_feed_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.channel_feed_dto",
        "documentation": {}
    },
    {
        "label": "ServerChannelDTO",
        "importPath": "bot.DTO.server_channel_dto",
        "description": "bot.DTO.server_channel_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.server_channel_dto",
        "documentation": {}
    },
    {
        "label": "ServerColorDTO",
        "importPath": "bot.DTO.server_color_dto",
        "description": "bot.DTO.server_color_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.server_color_dto",
        "documentation": {}
    },
    {
        "label": "FeedBLL",
        "importPath": "bot.BLL.feed_bll",
        "description": "bot.BLL.feed_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.feed_bll",
        "documentation": {}
    },
    {
        "label": "EmtyBLL",
        "importPath": "bot.BLL.emty_bll",
        "description": "bot.BLL.emty_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.emty_bll",
        "documentation": {}
    },
    {
        "label": "FeedEmtyBLL",
        "importPath": "bot.BLL.feed_emty_bll",
        "description": "bot.BLL.feed_emty_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.feed_emty_bll",
        "documentation": {}
    },
    {
        "label": "ServerBLL",
        "importPath": "bot.BLL.server_bll",
        "description": "bot.BLL.server_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.server_bll",
        "documentation": {}
    },
    {
        "label": "ChannelBLL",
        "importPath": "bot.BLL.channel_bll",
        "description": "bot.BLL.channel_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.channel_bll",
        "documentation": {}
    },
    {
        "label": "ChannelEmtyBLL",
        "importPath": "bot.BLL.channel_emty_bll",
        "description": "bot.BLL.channel_emty_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.channel_emty_bll",
        "documentation": {}
    },
    {
        "label": "ChannelFeedBLL",
        "importPath": "bot.BLL.channel_feed_bll",
        "description": "bot.BLL.channel_feed_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.channel_feed_bll",
        "documentation": {}
    },
    {
        "label": "ServerChannelBLL",
        "importPath": "bot.BLL.server_channel_bll",
        "description": "bot.BLL.server_channel_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.server_channel_bll",
        "documentation": {}
    },
    {
        "label": "ServerColorBLL",
        "importPath": "bot.BLL.server_color_bll",
        "description": "bot.BLL.server_color_bll",
        "isExtraImport": true,
        "detail": "bot.BLL.server_color_bll",
        "documentation": {}
    },
    {
        "label": "FeedEmbed",
        "importPath": "bot.GUI.feed_embed",
        "description": "bot.GUI.feed_embed",
        "isExtraImport": true,
        "detail": "bot.GUI.feed_embed",
        "documentation": {}
    },
    {
        "label": "ReadRSS",
        "importPath": "bot.utils.read_rss",
        "description": "bot.utils.read_rss",
        "isExtraImport": true,
        "detail": "bot.utils.read_rss",
        "documentation": {}
    },
    {
        "label": "TextProcessor",
        "importPath": "bot.utils.text_processor",
        "description": "bot.utils.text_processor",
        "isExtraImport": true,
        "detail": "bot.utils.text_processor",
        "documentation": {}
    },
    {
        "label": "ServerPayDAL",
        "importPath": "bot.DAL.server_pay_dal",
        "description": "bot.DAL.server_pay_dal",
        "isExtraImport": true,
        "detail": "bot.DAL.server_pay_dal",
        "documentation": {}
    },
    {
        "label": "ServerPayDTO",
        "importPath": "bot.DTO.server_pay_dto",
        "description": "bot.DTO.server_pay_dto",
        "isExtraImport": true,
        "detail": "bot.DTO.server_pay_dto",
        "documentation": {}
    },
    {
        "label": "QrPayCodeDAL",
        "importPath": "bot.DAL.qr_pay_code_dal",
        "description": "bot.DAL.qr_pay_code_dal",
        "isExtraImport": true,
        "detail": "bot.DAL.qr_pay_code_dal",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ChannelBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.channel_bll",
        "description": "src.bot.BLL.channel_bll",
        "peekOfCode": "class ChannelBLL:\n    def __init__(self):\n        self.__channelDAL = ChannelDAL()\n    def insert_channel(self, channel_dto: ChannelDTO) -> bool:\n        return self.__channelDAL.insert_channel(channel_dto)\n    def delete_channel_by_id_channel(self, channel_link: str) -> bool:\n        return self.__channelDAL.delete_channel_by_id_channel(channel_link)\n    def delete_all_channel(self) -> bool:\n        return self.__channelDAL.delete_all_channel()\n    def update_channel_by_id_channel(self, channel_link: str, Channel_dto: ChannelDTO) -> bool:",
        "detail": "src.bot.BLL.channel_bll",
        "documentation": {}
    },
    {
        "label": "ChannelEmtyBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.channel_emty_bll",
        "description": "src.bot.BLL.channel_emty_bll",
        "peekOfCode": "class ChannelEmtyBLL:\n    def __init__(self):\n        self.__channelEmtyDAL = ChannelEmtyDAL()\n    def insert_channel_emty(self, channel_emty_dto: ChannelEmtyDTO) -> bool:\n        return self.__channelEmtyDAL.insert_channel_emty(channel_emty_dto)\n    def delete_channel_emty_by_id_channel(self, id_channel: str) -> bool:  \n        return self.__channelEmtyDAL.delete_channel_emty_by_id_channel(id_channel)\n    def delete_channel_emty_by_id_channel_and_link_emty(self, id_channel: str, link_emty: str) -> bool:\n        return self.__channelEmtyDAL.delete_channel_emty_by_id_channel_and_link_emty(id_channel, link_emty)\n    def delete_all_channel_emty(self) -> bool:",
        "detail": "src.bot.BLL.channel_emty_bll",
        "documentation": {}
    },
    {
        "label": "ChannelFeedBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.channel_feed_bll",
        "description": "src.bot.BLL.channel_feed_bll",
        "peekOfCode": "class ChannelFeedBLL:\n    def __init__(self):\n        self.__channelFeedDAL = ChannelFeedDAL()\n    def insert_channel_feed(self, channel_feed_dto: ChannelFeedDTO) -> bool:\n        return self.__channelFeedDAL.insert_channel_feed(channel_feed_dto)\n    def delete_channel_feed_by_id_channel(self, id_channel: str) -> bool:\n        return self.__channelFeedDAL.delete_channel_feed_by_id_channel(id_channel)\n    def delete_channel_feed_by_id_channel_and_link_atom_feed(self, id_channel: str, linkAtom_feed: str) -> bool:\n        return self.__channelFeedDAL.delete_channel_feed_by_id_channel_and_link_atom_feed(id_channel, linkAtom_feed)\n    def delete_channel_feed_by_id_channel_and_link_feed(self, id_channel: str, link_feed: str) -> bool:",
        "detail": "src.bot.BLL.channel_feed_bll",
        "documentation": {}
    },
    {
        "label": "EmtyBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.emty_bll",
        "description": "src.bot.BLL.emty_bll",
        "peekOfCode": "class EmtyBLL:\n    def __init__(self):\n        self.__EmtyDAL = EmtyDAL()\n    def insert_emty(self, emty_dto: EmtyDTO) -> bool:\n        return self.__EmtyDAL.insert_emty(emty_dto)\n    def delete_emty_by_link_emty(self, emty_link: str) -> bool:\n        return self.__EmtyDAL.delete_emty_by_link_emty(emty_link)\n    def delete_all_emty(self) -> bool:\n        return self.__EmtyDAL.delete_all_emty()\n    def update_emty_by_link_emty(self, emty_link: str, emty_dto: EmtyDTO) -> bool:",
        "detail": "src.bot.BLL.emty_bll",
        "documentation": {}
    },
    {
        "label": "FeedBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.feed_bll",
        "description": "src.bot.BLL.feed_bll",
        "peekOfCode": "class FeedBLL:\n    def __init__(self):\n        self.__FeedDAL = FeedDAL()\n    def insert_feed(self, feed_dto: FeedDTO) -> bool:\n        return self.__FeedDAL.insert_feed(feed_dto)\n    def delete_feed_by_link_atom_feed(self, linkAtom_feed: str) -> bool:\n        return self.__FeedDAL.delete_feed_by_link_atom_feed(linkAtom_feed)\n    def delete_all_feed(self) -> bool:\n        return self.__FeedDAL.delete_all_feed()\n    def update_feed_by_link_atom_feed(self, linkAtom_feed: str, feed_dto: FeedDTO) -> bool:",
        "detail": "src.bot.BLL.feed_bll",
        "documentation": {}
    },
    {
        "label": "FeedEmtyBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.feed_emty_bll",
        "description": "src.bot.BLL.feed_emty_bll",
        "peekOfCode": "class FeedEmtyBLL:\n    def __init__(self):\n        self.__FeedEmtyDAL = FeedEmtyDAL()\n    def insert_feed_emty(self, feedEmty_dto: FeedEmtyDTO) -> bool:\n        return self.__FeedEmtyDAL.insert_feed_emty(feedEmty_dto)\n    def delete_feed_emty_by_link_atom_feed_and_link_emty(self, feed_link: str, emty_link: str) -> bool:\n        return self.__FeedEmtyDAL.delete_feed_emty_by_link_atom_feed_and_link_emty(feed_link, emty_link)\n    def delete_feed_emty_by_link_feed_and_link_emty(self, feed_link: str, emty_link: str) -> bool:\n        return self.__FeedEmtyDAL.delete_feed_emty_by_link_feed_and_link_emty(feed_link, emty_link)\n    def delete_feed_emty_by_link_feed(self, link_feed: str) -> bool:",
        "detail": "src.bot.BLL.feed_emty_bll",
        "documentation": {}
    },
    {
        "label": "ServerBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.server_bll",
        "description": "src.bot.BLL.server_bll",
        "peekOfCode": "class ServerBLL:\n    def __init__(self):\n        self.__serverDAL = ServerDAL()\n    def insert_server(self, server_dto: ServerDTO) -> bool:\n            return self.__serverDAL.insert_server(server_dto)\n    def update_server_by_id_server(self, id_server: str, server_dto: ServerDTO) -> bool:\n            return self.__serverDAL.update_server_by_id_server(id_server, server_dto)\n    def delete_all_server(self) -> bool:\n            return self.__serverDAL.delete_all_server()\n    def delete_server_by_id_server(self, id_server: str) -> bool:",
        "detail": "src.bot.BLL.server_bll",
        "documentation": {}
    },
    {
        "label": "ServerChannelBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.server_channel_bll",
        "description": "src.bot.BLL.server_channel_bll",
        "peekOfCode": "class ServerChannelBLL:\n    def __init__(self):\n        self.__serverChannelDAL = ServerChannelDAL()\n    def insert_server_channel(self, server_channel_dto: ServerChannelDTO) -> bool:\n            return self.__serverChannelDAL.insert_server_channel(server_channel_dto)\n    def delete_server_channel_by_id_server_and_id_channel(self, id_server: str, id_channel: str) -> bool:\n            return self.__serverChannelDAL.delete_server_channel_by_id_server_and_id_channel(id_server, id_channel)\n    def delete_server_channel_by_id_channel(self, id_channel: str) -> bool:\n            return self.__serverChannelDAL.delete_server_channel_by_id_channel(id_channel)\n    def delete_all_server_channel(self) -> bool:",
        "detail": "src.bot.BLL.server_channel_bll",
        "documentation": {}
    },
    {
        "label": "ServerColorBLL",
        "kind": 6,
        "importPath": "src.bot.BLL.server_color_bll",
        "description": "src.bot.BLL.server_color_bll",
        "peekOfCode": "class ServerColorBLL:\n    def __init__(self):\n        self.__serverColorDAL = ServerColorDAL()\n    def insert_server_color(self, server_color_dto: ServerColorDTO) -> bool:\n            return self.__serverColorDAL.insert_server_color(server_color_dto)\n    def delete_server_color_by_id_server(self, id_server: str) -> bool:\n            return self.__serverColorDAL.delete_server_color_by_id_server(id_server)\n    def delete_all_server_color(self) -> bool:\n            return self.__serverColorDAL.delete_all_server_color()\n    def update_server_color_by_id_server(self, id_server: str, server_color_dto: ServerColorDTO) -> bool:",
        "detail": "src.bot.BLL.server_color_bll",
        "documentation": {}
    },
    {
        "label": "AdminBotCommands",
        "kind": 6,
        "importPath": "src.bot.cogs.admin_bot_commands",
        "description": "src.bot.cogs.admin_bot_commands",
        "peekOfCode": "class AdminBotCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.command(name=\"shutdown\")\n    @commands.is_owner()\n    async def shutdown(self, ctx):\n        try:\n            channel = ctx.channel if check_dm_channel(ctx) else ctx.channel\n            embed = CustomEmbed(\n                id_server=str(ctx.guild.id) if not isinstance(ctx.channel, DMChannel) else \"DM\",",
        "detail": "src.bot.cogs.admin_bot_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.cogs.admin_bot_commands",
        "description": "src.bot.cogs.admin_bot_commands",
        "peekOfCode": "logger = logging.getLogger('AdminBotCommands')\nclass AdminBotCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.command(name=\"shutdown\")\n    @commands.is_owner()\n    async def shutdown(self, ctx):\n        try:\n            channel = ctx.channel if check_dm_channel(ctx) else ctx.channel\n            embed = CustomEmbed(",
        "detail": "src.bot.cogs.admin_bot_commands",
        "documentation": {}
    },
    {
        "label": "AdminServerCommands",
        "kind": 6,
        "importPath": "src.bot.cogs.admin_server_commands",
        "description": "src.bot.cogs.admin_server_commands",
        "peekOfCode": "class AdminServerCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    async def cog_check(self, ctx):\n        if check_dm_channel(ctx):\n            await ctx.send(\"You can't use this command in DM.\")\n            return False\n        return True\n    def is_server_owner(self, ctx):\n        return ctx.author.id == ctx.guild.owner_id",
        "detail": "src.bot.cogs.admin_server_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.cogs.admin_server_commands",
        "description": "src.bot.cogs.admin_server_commands",
        "peekOfCode": "logger = logging.getLogger('AdminServerCommands')\nclass AdminServerCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    async def cog_check(self, ctx):\n        if check_dm_channel(ctx):\n            await ctx.send(\"You can't use this command in DM.\")\n            return False\n        return True\n    def is_server_owner(self, ctx):",
        "detail": "src.bot.cogs.admin_server_commands",
        "documentation": {}
    },
    {
        "label": "check_dm_channel",
        "kind": 2,
        "importPath": "src.bot.cogs.check_dm_channel",
        "description": "src.bot.cogs.check_dm_channel",
        "peekOfCode": "def check_dm_channel(ctx):\n    if isinstance(ctx.channel, DMChannel):\n        return True\n    return False",
        "detail": "src.bot.cogs.check_dm_channel",
        "documentation": {}
    },
    {
        "label": "Events",
        "kind": 6,
        "importPath": "src.bot.cogs.events",
        "description": "src.bot.cogs.events",
        "peekOfCode": "class Events(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot\n    async def load_guilds(self):\n        try:\n            server_bll = ServerBLL() \n            channel_bll = ChannelBLL()\n            channel_feed_bll = ChannelFeedBLL()\n            channel_emty_bll = ChannelEmtyBLL()\n            server_color_bll = ServerColorBLL()",
        "detail": "src.bot.cogs.events",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.cogs.events",
        "description": "src.bot.cogs.events",
        "peekOfCode": "logger = logging.getLogger('events')\nclass Events(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot\n    async def load_guilds(self):\n        try:\n            server_bll = ServerBLL() \n            channel_bll = ChannelBLL()\n            channel_feed_bll = ChannelFeedBLL()\n            channel_emty_bll = ChannelEmtyBLL()",
        "detail": "src.bot.cogs.events",
        "documentation": {}
    },
    {
        "label": "NormalCommands",
        "kind": 6,
        "importPath": "src.bot.cogs.normal_commands",
        "description": "src.bot.cogs.normal_commands",
        "peekOfCode": "class NormalCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.command(name=\"ping\")\n    async def ping(self, ctx):\n        channel = ctx.channel\n        await channel.send(f'Pong! {round(self.bot.latency * 1000)}ms')\n    @commands.command(name=\"get_rss\")\n    async def get_rss(self, ctx, url: str):\n        channel = ctx.channel",
        "detail": "src.bot.cogs.normal_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.cogs.normal_commands",
        "description": "src.bot.cogs.normal_commands",
        "peekOfCode": "logger = logging.getLogger('nextcord')\nclass NormalCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.command(name=\"ping\")\n    async def ping(self, ctx):\n        channel = ctx.channel\n        await channel.send(f'Pong! {round(self.bot.latency * 1000)}ms')\n    @commands.command(name=\"get_rss\")\n    async def get_rss(self, ctx, url: str):",
        "detail": "src.bot.cogs.normal_commands",
        "documentation": {}
    },
    {
        "label": "SlashCommands",
        "kind": 6,
        "importPath": "src.bot.cogs.slash_commands",
        "description": "src.bot.cogs.slash_commands",
        "peekOfCode": "class SlashCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @nextcord.slash_command(name=\"ping\", description=\"Check bot latency\")\n    async def ping(self, interaction: Interaction):\n        result = f'Pong! {round(self.bot.latency * 1000)}ms'\n        await interaction.response.send_message(result)\n    @nextcord.slash_command(name=\"clear\", description=\"Clear channel post history\")\n    async def clear_history(self, interaction: Interaction, channel: TextChannel = SlashOption(description=\"The target channel\"), link_atom_feed: Optional[str] = SlashOption(description=\"The Atom/RSS feed link\")):\n        try:",
        "detail": "src.bot.cogs.slash_commands",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "src.bot.cogs.slash_commands",
        "description": "src.bot.cogs.slash_commands",
        "peekOfCode": "def setup(bot):\n    bot.add_cog(SlashCommands(bot))",
        "detail": "src.bot.cogs.slash_commands",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.cogs.slash_commands",
        "description": "src.bot.cogs.slash_commands",
        "peekOfCode": "logger = logging.getLogger('SlashCommands')\nclass SlashCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @nextcord.slash_command(name=\"ping\", description=\"Check bot latency\")\n    async def ping(self, interaction: Interaction):\n        result = f'Pong! {round(self.bot.latency * 1000)}ms'\n        await interaction.response.send_message(result)\n    @nextcord.slash_command(name=\"clear\", description=\"Clear channel post history\")\n    async def clear_history(self, interaction: Interaction, channel: TextChannel = SlashOption(description=\"The target channel\"), link_atom_feed: Optional[str] = SlashOption(description=\"The Atom/RSS feed link\")):",
        "detail": "src.bot.cogs.slash_commands",
        "documentation": {}
    },
    {
        "label": "BaseDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.base_dal",
        "description": "src.bot.DAL.base_dal",
        "peekOfCode": "class BaseDAL:\n    def __init__(self):\n        # Sử dụng đường dẫn tuyệt đối đến tệp cơ sở dữ liệu\n        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))  # Lấy thư mục gốc của dự án\n        db_path = os.path.join(base_dir, \"db.sqlite3\")\n        self.connection = sqlite3.connect(db_path)\n        self.cursor = self.connection.cursor()\n    def create_table(self):\n        pass\n    def __del__(self):",
        "detail": "src.bot.DAL.base_dal",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.DAL.base_dal",
        "description": "src.bot.DAL.base_dal",
        "peekOfCode": "logger = logging.getLogger('dal')\nclass BaseDAL:\n    def __init__(self):\n        # Sử dụng đường dẫn tuyệt đối đến tệp cơ sở dữ liệu\n        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))  # Lấy thư mục gốc của dự án\n        db_path = os.path.join(base_dir, \"db.sqlite3\")\n        self.connection = sqlite3.connect(db_path)\n        self.cursor = self.connection.cursor()\n    def create_table(self):\n        pass",
        "detail": "src.bot.DAL.base_dal",
        "documentation": {}
    },
    {
        "label": "ChannelDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.channel_dal",
        "description": "src.bot.DAL.channel_dal",
        "peekOfCode": "class ChannelDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_channel(\n                id_channel TEXT PRIMARY KEY,\n                name_channel TEXT\n            )",
        "detail": "src.bot.DAL.channel_dal",
        "documentation": {}
    },
    {
        "label": "ChannelEmtyDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.channel_emty_dal",
        "description": "src.bot.DAL.channel_emty_dal",
        "peekOfCode": "class ChannelEmtyDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_channel_emty(\n                id_channel TEXT,\n                link_emty TEXT,\n                PRIMARY KEY (id_channel, link_emty),",
        "detail": "src.bot.DAL.channel_emty_dal",
        "documentation": {}
    },
    {
        "label": "ChannelFeedDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.channel_feed_dal",
        "description": "src.bot.DAL.channel_feed_dal",
        "peekOfCode": "class ChannelFeedDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n                CREATE TABLE tbl_channel_feed(\n                    link_atom_feed TEXT,\n                    id_channel TEXT,\n                    PRIMARY KEY (id_channel, link_atom_feed),",
        "detail": "src.bot.DAL.channel_feed_dal",
        "documentation": {}
    },
    {
        "label": "EmtyDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.emty_dal",
        "description": "src.bot.DAL.emty_dal",
        "peekOfCode": "class EmtyDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n                CREATE TABLE tbl_emty(\n                    link_emty TEXT PRIMARY KEY,\n                    title_emty TEXT,\n                    description_emty TEXT,",
        "detail": "src.bot.DAL.emty_dal",
        "documentation": {}
    },
    {
        "label": "FeedDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.feed_dal",
        "description": "src.bot.DAL.feed_dal",
        "peekOfCode": "class FeedDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_feed(\n                link_feed TEXT,\n                link_atom_feed TEXT PRIMARY KEY,\n                title_feed TEXT,",
        "detail": "src.bot.DAL.feed_dal",
        "documentation": {}
    },
    {
        "label": "FeedEmtyDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.feed_emty_dal",
        "description": "src.bot.DAL.feed_emty_dal",
        "peekOfCode": "class FeedEmtyDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_feed_emty(\n                link_atom_feed TEXT,\n                link_emty TEXT,\n                PRIMARY KEY (link_atom_feed, link_emty),",
        "detail": "src.bot.DAL.feed_emty_dal",
        "documentation": {}
    },
    {
        "label": "QrPayCodeDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.qr_pay_code_dal",
        "description": "src.bot.DAL.qr_pay_code_dal",
        "peekOfCode": "class QrPayCodeDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE qr_pay_code (\n                qr_code TEXT PRIMARY KEY,\n                id_server TEXT\n            )",
        "detail": "src.bot.DAL.qr_pay_code_dal",
        "documentation": {}
    },
    {
        "label": "ServerChannelDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.server_channel_dal",
        "description": "src.bot.DAL.server_channel_dal",
        "peekOfCode": "class ServerChannelDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_server_channel(\n                id_server TEXT,\n                id_channel TEXT,\n                PRIMARY KEY (id_server, id_channel),",
        "detail": "src.bot.DAL.server_channel_dal",
        "documentation": {}
    },
    {
        "label": "ServerColorDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.server_color_dal",
        "description": "src.bot.DAL.server_color_dal",
        "peekOfCode": "class ServerColorDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_server_color(\n                id_server TEXT PRIMARY KEY,\n                hex_color TEXT,\n                name_color TEXT,",
        "detail": "src.bot.DAL.server_color_dal",
        "documentation": {}
    },
    {
        "label": "ServerDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.server_dal",
        "description": "src.bot.DAL.server_dal",
        "peekOfCode": "class ServerDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE TABLE tbl_server(\n                id_server TEXT PRIMARY KEY,\n                name_server TEXT\n            )",
        "detail": "src.bot.DAL.server_dal",
        "documentation": {}
    },
    {
        "label": "ServerPayDAL",
        "kind": 6,
        "importPath": "src.bot.DAL.server_pay_dal",
        "description": "src.bot.DAL.server_pay_dal",
        "peekOfCode": "class ServerPayDAL(BaseDAL):\n    def __init__(self):\n        super().__init__()\n    def create_table(self):\n        try:\n            self.cursor.execute('''\n            CREATE Table server_pay (\n                id_server TEXT PRIMARY KEY,\n                is_pay BOOLEAN DEFAULT 0\n            )",
        "detail": "src.bot.DAL.server_pay_dal",
        "documentation": {}
    },
    {
        "label": "ChannelDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.channel_dto",
        "description": "src.bot.DTO.channel_dto",
        "peekOfCode": "class ChannelDTO:\n    def __init__(self, id_channel: str, name__channel: str):\n        self.__id_channel = id_channel\n        self.__name_channel = name__channel\n    def __str__(self) -> str:\n        return f\"ChannelDTO(id_channel={self.__id_channel}, name_channel={self.__name_channel})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ChannelDTO):\n            return NotImplementedType\n        return self.__id_channel == other.__id_channel and self.__name_channel == other.__name_channel",
        "detail": "src.bot.DTO.channel_dto",
        "documentation": {}
    },
    {
        "label": "ChannelEmtyDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.channel_emty_dto",
        "description": "src.bot.DTO.channel_emty_dto",
        "peekOfCode": "class ChannelEmtyDTO:\n    def __init__(self, channel_dto: ChannelDTO, emty_dto: EmtyDTO):\n        self.__channel_dto = channel_dto\n        self.__emty_dto = emty_dto\n    def __str__(self) -> str:\n        return f\"ChannelEmtyDTO(channel={self.__channel_dto}, emty={self.__emty_dto})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ChannelEmtyDTO):\n            return NotImplementedType\n        return self.__channel_dto == other.__channel_dto and self.__emty_dto == other.__emty_dto",
        "detail": "src.bot.DTO.channel_emty_dto",
        "documentation": {}
    },
    {
        "label": "ChannelFeedDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.channel_feed_dto",
        "description": "src.bot.DTO.channel_feed_dto",
        "peekOfCode": "class ChannelFeedDTO:\n    def __init__(self, channel_dto: ChannelDTO, feed_dto: FeedDTO):\n        self.__channel_dto = channel_dto\n        self.__feed_dto = feed_dto\n    def __str__(self) -> str:\n        return f\"ChannelFeedDTO(channel={self.__channel_dto}, feed={self.__feed_dto})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ChannelFeedDTO):\n            return NotImplementedType\n        return self.__channel_dto == other.__channel_dto and self.__feed_dto == other.__feed_dto",
        "detail": "src.bot.DTO.channel_feed_dto",
        "documentation": {}
    },
    {
        "label": "ColorDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.color_dto",
        "description": "src.bot.DTO.color_dto",
        "peekOfCode": "class ColorDTO:\n    def __init__(self, color: str):\n        color_mapping = {\n            \"red\": \"0xFF0000\", \n            \"orange\": \"0xFFA500\", \n            \"yellow\": \"0xF1C40F\",\n            \"green\": \"0x2ECC71\",\n            \"blue\": \"0x3498DB\",\n            \"purple\": \"0x9B59B6\",\n            \"gray\": \"0x808080\",",
        "detail": "src.bot.DTO.color_dto",
        "documentation": {}
    },
    {
        "label": "EmtyDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.emty_dto",
        "description": "src.bot.DTO.emty_dto",
        "peekOfCode": "class EmtyDTO:\n    def __init__(self, link_emty: str, title_emty: str, description_emty: str, image_emty: str, pubdate_emty: str):\n        self.__link_emty = link_emty\n        self.__title_emty = title_emty\n        self.__description_emty = description_emty\n        self.__image_emty = image_emty\n        self.__pubdate_emty = pubdate_emty\n    def __str__(self) -> str:\n        return f\"EmtyDTO(link_emty={self.__link_emty}, title_emty={self.__title_emty}, description_emty={self.__description_emty}, image_emty={self.__image_emty}, pubdate_emty={self.__pubdate_emty})\"\n    def __eq__(self, other: object) -> bool:",
        "detail": "src.bot.DTO.emty_dto",
        "documentation": {}
    },
    {
        "label": "FeedDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.feed_dto",
        "description": "src.bot.DTO.feed_dto",
        "peekOfCode": "class FeedDTO:\n    def __init__(self, link_feed: str, link_atom_feed: str, title_feed: str, description_feed: str, logo_feed: str, pubDate_feed: str):\n        self.__link_feed = link_feed\n        self.__link_atom_feed = link_atom_feed\n        self.__title_feed = title_feed\n        self.__description_feed = description_feed\n        self.__logo_feed = logo_feed\n        self.__pubdate_feed = pubDate_feed\n    def __str__(self) -> str:\n        return f\"FeedDTO(link_feed={self.__link_feed}, link_atom_feed={self.__link_atom_feed}, title_feed={self.__title_feed}, description_feed={self.__description_feed}, logo_feed={self.__logo_feed}, pubdate_feed={self.__pubdate_feed})\"",
        "detail": "src.bot.DTO.feed_dto",
        "documentation": {}
    },
    {
        "label": "FeedEmtyDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.feed_emty_dto",
        "description": "src.bot.DTO.feed_emty_dto",
        "peekOfCode": "class FeedEmtyDTO:\n    def __init__(self, feed_dto: FeedDTO, emty_dto: EmtyDTO):\n        self.__feed_dto = feed_dto\n        self.__emty_dto = emty_dto\n    def __str__(self) -> str:\n        return f\"FeedEmtyDTO(feed={self.__feed_dto}, emty={self.__emty_dto})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, FeedEmtyDTO):\n            return NotImplementedType\n        return self.__feed_dto == other.__feed_dto and self.__emty_dto == other.__emty_dto",
        "detail": "src.bot.DTO.feed_emty_dto",
        "documentation": {}
    },
    {
        "label": "QrPayCodeDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.qr_code_pay_dto",
        "description": "src.bot.DTO.qr_code_pay_dto",
        "peekOfCode": "class QrPayCodeDTO:\n    def __init__(self, qr_code: str, server_dto: ServerDTO, ngay_tao: datetime):\n        self.__qr_code = qr_code\n        self.__server_dto = server_dto\n        self.__ngay_tao = ngay_tao\n    def __str__(self) -> str:\n        return f\"QrPayCodeDTO(server={self.__server_dto}, qr_code={self.__qr_code})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, QrPayCodeDTO):\n            return NotImplementedType",
        "detail": "src.bot.DTO.qr_code_pay_dto",
        "documentation": {}
    },
    {
        "label": "ServerChannelDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.server_channel_dto",
        "description": "src.bot.DTO.server_channel_dto",
        "peekOfCode": "class ServerChannelDTO:\n    def __init__(self, server_dto: ServerDTO, channel_dto: ChannelDTO):\n        self.__server_dto = server_dto\n        self.__channel_dto = channel_dto\n    def __str__(self) -> str:\n        return f\"ServerChannelDTO(server_dto={self.__server_dto}, channel_dto={self.__channel_dto})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(object, ServerChannelDTO):\n            return NotImplementedType\n        return self.__server_dto == other.__server_dto and self.__channel_dto == other.__channel_dto",
        "detail": "src.bot.DTO.server_channel_dto",
        "documentation": {}
    },
    {
        "label": "ServerColorDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.server_color_dto",
        "description": "src.bot.DTO.server_color_dto",
        "peekOfCode": "class ServerColorDTO:\n    def __init__(self, server_dto: ServerDTO, color_dto: ColorDTO):\n        self.__server_dto = server_dto\n        self.__color_dto = color_dto\n    def __str__(self) -> str:\n        return f\"ServerColorDTO(server={self.__server_dto}, color={self.__color_dto})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ServerColorDTO):\n            return NotImplementedType\n        return self.__server_dto == other.__server_dto and self.__color_dto == other.__color_dto",
        "detail": "src.bot.DTO.server_color_dto",
        "documentation": {}
    },
    {
        "label": "ServerDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.server_dto",
        "description": "src.bot.DTO.server_dto",
        "peekOfCode": "class ServerDTO:\n    def __init__(self, id_server: str, name_server: str):\n        self.__id_server = id_server\n        self.__name_server = name_server\n    def __str__(self) -> str:\n        return f\"ServerDTO(id_server={self.__id_server}, name_server={self.__name_server})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ServerDTO):\n            return NotImplementedType\n        return self.__id_server == other.__id_server and self.__name_server == other.__name_server",
        "detail": "src.bot.DTO.server_dto",
        "documentation": {}
    },
    {
        "label": "ServerPayDTO",
        "kind": 6,
        "importPath": "src.bot.DTO.server_pay_dto",
        "description": "src.bot.DTO.server_pay_dto",
        "peekOfCode": "class ServerPayDTO:\n    def __init__(self, server_dto: str, is_pay: bool):\n        self.__server_dto = server_dto\n        self.__is_pay = is_pay\n    def __str__(self) -> str:\n        return f\"ChannelPayDTO(server={self.__server_dto}, is_pay={self.__is_pay})\"\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ServerPayDTO):\n            return NotImplementedType\n        return self.__server_dto == other.__server_dto and self.__is_pay == other.__is_pay",
        "detail": "src.bot.DTO.server_pay_dto",
        "documentation": {}
    },
    {
        "label": "ButtonOfCtrlCommand",
        "kind": 6,
        "importPath": "src.bot.GUI.button_of_ctrl_command",
        "description": "src.bot.GUI.button_of_ctrl_command",
        "peekOfCode": "class ButtonOfCtrlCommand(View):\n    def __init__(self, user, bot: Bot):\n        super().__init__(timeout=None)\n        self.bot = bot\n        self.author = user  # Store the user who initiated the interaction        \n    @button(label=\"show settings\", style=nextcord.ButtonStyle.success)\n    async def show_settings_button(self, button: Button, interaction: Interaction):\n        if not await check_authorization(interaction, self.author):\n            return\n        try:",
        "detail": "src.bot.GUI.button_of_ctrl_command",
        "documentation": {}
    },
    {
        "label": "ButtonOfHelpCommnad",
        "kind": 6,
        "importPath": "src.bot.GUI.button_of_help_command",
        "description": "src.bot.GUI.button_of_help_command",
        "peekOfCode": "class ButtonOfHelpCommnad(View):\n    def __init__(self):\n        super().__init__(timeout=None)\n        link_server_button = Button(style=nextcord.ButtonStyle.link, label=\"Our server\", url=\"https://discord.com/invite/Q7NXBFpZeM\")\n        self.add_item(link_server_button)\n        link_bot_button = Button(style=nextcord.ButtonStyle.link, label=\"Link invite\", url=\"https://discord.com/oauth2/authorize?client_id=1236720788187381760&permissions=0&integration_type=0&scope=bot\")\n        self.add_item(link_bot_button)\n    @button(label=\"Infor\", style=nextcord.ButtonStyle.primary)\n    async def send_message(self, button: Button, interaction: Interaction):\n        await interaction.response.send_message(''' ",
        "detail": "src.bot.GUI.button_of_help_command",
        "documentation": {}
    },
    {
        "label": "CustomEmbed",
        "kind": 6,
        "importPath": "src.bot.GUI.custom_embed",
        "description": "src.bot.GUI.custom_embed",
        "peekOfCode": "class CustomEmbed(nextcord.Embed):\n    def __init__(self, id_server: str, **kwargs):\n        # Fetch the default color from the server's settings\n        server_color_bll = ServerColorBLL()\n        server_dto = ServerDTO(id_server, \"\")\n        server_color_dto = server_color_bll.get_server_color_by_id_server(server_dto.get_id_server())\n        if 'color' not in kwargs:\n            # If no color is provided, use the server's default color\n            if (server_color_dto is None):\n                default_color = \"0xFF0000\"",
        "detail": "src.bot.GUI.custom_embed",
        "documentation": {}
    },
    {
        "label": "FeedEmbed",
        "kind": 6,
        "importPath": "src.bot.GUI.feed_embed",
        "description": "src.bot.GUI.feed_embed",
        "peekOfCode": "class FeedEmbed:\n    def __init__(self, id_server: str, linkAtom_feed: str, link_emty: str):\n        feed_emty_bll = FeedEmtyBLL()\n        feed_emty_dto = feed_emty_bll.get_feed_emty_by_link_atom_feed_and_link_emty(linkAtom_feed, link_emty)\n        # print(f\"feed_emty_dto: {feed_emty_dto}\")\n        if feed_emty_dto is None:\n            return\n        self.__id_server = id_server    \n        self.__link = feed_emty_dto.get_feed().get_link_feed()\n        self.__logo = feed_emty_dto.get_feed().get_logo_feed()",
        "detail": "src.bot.GUI.feed_embed",
        "documentation": {}
    },
    {
        "label": "ModalClearChannelEmty",
        "kind": 6,
        "importPath": "src.bot.GUI.modal_clear_channel_emty",
        "description": "src.bot.GUI.modal_clear_channel_emty",
        "peekOfCode": "class ModalClearChannelEmty(Modal):\n    def __init__(self, user):\n        super().__init__(title=\"Clear Channel Emty\")\n        self.author = user\n        self.id_channel = TextInput(label=\"Channel ID\", placeholder=\"Enter the channel ID\", required=True)\n        self.link_emty = TextInput(label=\"Emty Link (Optional)\", placeholder=\"Enter the emty link\", required=False)\n        self.add_item(self.id_channel)\n        self.add_item(self.link_emty)\n    async def callback(self, interaction: Interaction):\n        if not await check_authorization(interaction, self.author):",
        "detail": "src.bot.GUI.modal_clear_channel_emty",
        "documentation": {}
    },
    {
        "label": "ModalClearChannelFeed",
        "kind": 6,
        "importPath": "src.bot.GUI.modal_clear_channel_feed",
        "description": "src.bot.GUI.modal_clear_channel_feed",
        "peekOfCode": "class ModalClearChannelFeed(Modal):\n    def __init__(self, user):\n        super().__init__(title=\"Clear Channel Feed\")\n        self.author = user\n        self.id_channel = TextInput(label=\"Channel ID\", placeholder=\"Enter the channel ID\", required=True)\n        self.link_feed = TextInput(label=\"Feed Link (Optional)\", placeholder=\"Enter the feed link\", required=False)\n        self.link_atom_feed = TextInput(label=\"Feed Link RSS (Optional)\", placeholder=\"Enter the feed link RSS\", required=False)\n        self.add_item(self.id_channel)\n        self.add_item(self.link_feed)\n        self.add_item(self.link_atom_feed)",
        "detail": "src.bot.GUI.modal_clear_channel_feed",
        "documentation": {}
    },
    {
        "label": "ModalClearFeedEmty",
        "kind": 6,
        "importPath": "src.bot.GUI.modal_clear_feed_emty",
        "description": "src.bot.GUI.modal_clear_feed_emty",
        "peekOfCode": "class ModalClearFeedEmty(Modal):\n        def __init__(self, user):\n            super().__init__(title=\"Clear Feed Emty\")\n            self.author = user\n            self.link_feed = TextInput(label=\"Feed Link (Optional)\", placeholder=\"Enter the feed link\", required=False)\n            self.link_atom_feed =TextInput(label=\"Feed link RSS (Optional)\", placeholder=\"Enter the feed link RSS\", required=False)\n            self.link_emty = TextInput(label=\"Emty Link (Optional)\", placeholder=\"Enter the emty link\", required=False)\n            self.add_item(self.link_feed)\n            self.add_item(self.link_atom_feed)\n            self.add_item(self.link_emty)",
        "detail": "src.bot.GUI.modal_clear_feed_emty",
        "documentation": {}
    },
    {
        "label": "ModalClearTable",
        "kind": 6,
        "importPath": "src.bot.GUI.modal_clear_table_of_db",
        "description": "src.bot.GUI.modal_clear_table_of_db",
        "peekOfCode": "class ModalClearTable(Modal):\n    def __init__(self, user):\n        super().__init__(title=\"Clear Table\")\n        self.author = user\n        self.table_name = TextInput(label=\"Table Name\", placeholder=\"Enter the table name\", required=True)\n        self.add_item(self.table_name)\n    async def callback(self, interaction: Interaction):\n        if not await check_authorization(interaction, self.author):\n            return\n        dataBase.delete_table(self.table_name.value)",
        "detail": "src.bot.GUI.modal_clear_table_of_db",
        "documentation": {}
    },
    {
        "label": "SelectClear",
        "kind": 6,
        "importPath": "src.bot.GUI.select_clear",
        "description": "src.bot.GUI.select_clear",
        "peekOfCode": "class SelectClear(View):\n    def __init__(self, user):\n        super().__init__()\n        self.author = user  # Store the user who initiated the interaction\n    @nextcord.ui.select(\n        placeholder=\"Choose a command category\",\n        options=[\n            SelectOption(label=\"all\", value=\"all\", description=\"Clear all database.\"),\n            SelectOption(label=\"tbl\", value=\"tbl\", description=\"Clear a table in database.\"),\n            SelectOption(label=\"feed_emty\", value=\"feed_emty\", description=\"Clear a feed emty in database.\"),",
        "detail": "src.bot.GUI.select_clear",
        "documentation": {}
    },
    {
        "label": "TestEmbed",
        "kind": 6,
        "importPath": "src.bot.GUI.test_embed",
        "description": "src.bot.GUI.test_embed",
        "peekOfCode": "class TestEmbed:\n    def __init__(self, id_server: str, feed_emty_dto: FeedEmtyDTO):\n        self.__feed_emty_dto = feed_emty_dto\n        self.__id_server = id_server\n        self.__link = self.__feed_emty_dto.get_feed().get_link_feed()\n        self.__logo = self.__feed_emty_dto.get_feed().get_logo_feed()\n        self.__footer_text = self.__feed_emty_dto.get_feed().get_description_feed()\n        self.__title = self.__feed_emty_dto.get_feed().get_title_feed()\n        self.__description = f'''\n            [**Xem bài viết**]({self.__feed_emty_dto.get_emty().get_link_emty()})",
        "detail": "src.bot.GUI.test_embed",
        "documentation": {}
    },
    {
        "label": "QRGenerator",
        "kind": 6,
        "importPath": "src.bot.utils.create_qr_payment",
        "description": "src.bot.utils.create_qr_payment",
        "peekOfCode": "class QRGenerator:\n    @staticmethod\n    def generator(user_id: str ):\n        # \"https://api.vietqr.io/image/970422-0347402306-9505cHJ.jpg?accountName=NGUYEN%20KHAC%20HIEU&amount=10000&addInfo=donnet\"\n        return f\"https://img.vietqr.io/image/MB-{os.getenv('BANK_ID')}-{os.getenv('QR_TEMPLATE')}.png?accountName=AIKO&amount=10000&addInfo=T{user_id}T\"",
        "detail": "src.bot.utils.create_qr_payment",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "src.bot.utils.Database",
        "description": "src.bot.utils.Database",
        "peekOfCode": "class Database:\n    def __init__(self):\n        # Sử dụng đường dẫn tuyệt đối đến tệp cơ sở dữ liệu\n        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))  # Lấy thư mục gốc của dự án\n        db_path = os.path.join(base_dir, \"db.sqlite3\")\n        self.connection = sqlite3.connect(db_path)\n        self.cursor = self.connection.cursor()\n    def drop_table(self, table_name):\n        try:\n            self.cursor.execute(f'DROP TABLE IF EXISTS ?', [table_name])",
        "detail": "src.bot.utils.Database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.bot.utils.Database",
        "description": "src.bot.utils.Database",
        "peekOfCode": "logger = logging.getLogger('DataBase')\nclass Database:\n    def __init__(self):\n        # Sử dụng đường dẫn tuyệt đối đến tệp cơ sở dữ liệu\n        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))  # Lấy thư mục gốc của dự án\n        db_path = os.path.join(base_dir, \"db.sqlite3\")\n        self.connection = sqlite3.connect(db_path)\n        self.cursor = self.connection.cursor()\n    def drop_table(self, table_name):\n        try:",
        "detail": "src.bot.utils.Database",
        "documentation": {}
    },
    {
        "label": "dataBase",
        "kind": 5,
        "importPath": "src.bot.utils.Database",
        "description": "src.bot.utils.Database",
        "peekOfCode": "dataBase = Database()",
        "detail": "src.bot.utils.Database",
        "documentation": {}
    },
    {
        "label": "datetime_from_string",
        "kind": 2,
        "importPath": "src.bot.utils.datetime_format",
        "description": "src.bot.utils.datetime_format",
        "peekOfCode": "def datetime_from_string(s: str):\n    return datetime.datetime.strptime(s, \"%Y-%m-%d %H:%M:%S\")\ndef datetime_to_string(d: datetime.datetime):\n    return d.strftime(\"%Y-%m-%d %H:%M:%S\")",
        "detail": "src.bot.utils.datetime_format",
        "documentation": {}
    },
    {
        "label": "datetime_to_string",
        "kind": 2,
        "importPath": "src.bot.utils.datetime_format",
        "description": "src.bot.utils.datetime_format",
        "peekOfCode": "def datetime_to_string(d: datetime.datetime):\n    return d.strftime(\"%Y-%m-%d %H:%M:%S\")",
        "detail": "src.bot.utils.datetime_format",
        "documentation": {}
    },
    {
        "label": "GetRSS",
        "kind": 6,
        "importPath": "src.bot.utils.get_rss",
        "description": "src.bot.utils.get_rss",
        "peekOfCode": "class GetRSS:\n    def __init__(self, url: str):\n        self.__url = url  # Keep the original URL\n        response = requests.get(self.__url)  # Fetch the content of the URL\n        soup = BeautifulSoup(response.text, 'html.parser')\n        # Find the RSS link in the HTML content\n        rss_link = soup.find('link', attrs={'type': 'application/rss+xml'})\n        if rss_link:\n            self.__rss_link = rss_link.get('href')  # type: ignore\n        else:",
        "detail": "src.bot.utils.get_rss",
        "documentation": {}
    },
    {
        "label": "inheritors",
        "kind": 2,
        "importPath": "src.bot.utils.get_supclass",
        "description": "src.bot.utils.get_supclass",
        "peekOfCode": "def inheritors(klass):\n    subclasses = set()\n    work = [klass]\n    while work:\n        parent = work.pop()\n        for child in parent.__subclasses__():\n            if child not in subclasses:\n                subclasses.add(child)\n                work.append(child)\n    return subclasses",
        "detail": "src.bot.utils.get_supclass",
        "documentation": {}
    },
    {
        "label": "ReadRSS",
        "kind": 6,
        "importPath": "src.bot.utils.read_rss",
        "description": "src.bot.utils.read_rss",
        "peekOfCode": "class ReadRSS:\n    def __init__(self, linkAtom_feed: str):\n        self.__feed = feedparser.parse(linkAtom_feed)\n        logo_url = self.__feed.feed.image.href if 'image' in self.__feed.feed else ''\n        description = self.__feed.feed.description if hasattr(self.__feed.feed, 'description') else ''\n        feed_dto = FeedDTO(self.__feed.feed.link, self.__feed.feed.title_detail.base, self.__feed.feed.title, description, logo_url, self.__feed.feed.updated)\n        feed_bll = FeedBLL()\n        feed_bll.insert_feed(feed_dto)\n        emty_bll = EmtyBLL()\n        feed_emty_bll = FeedEmtyBLL()",
        "detail": "src.bot.utils.read_rss",
        "documentation": {}
    },
    {
        "label": "ReadRSSWithoutSaving",
        "kind": 6,
        "importPath": "src.bot.utils.read_rss_without_saving",
        "description": "src.bot.utils.read_rss_without_saving",
        "peekOfCode": "class ReadRSSWithoutSaving:\n    def __init__(self, linkAtom_feed: str):\n        self.__feed = feedparser.parse(linkAtom_feed)\n        logo_url = self.__feed.feed.image.href if 'image' in self.__feed.feed else ''\n        description = self.__feed.feed.description if hasattr(self.__feed.feed, 'description') else ''\n        self.__feed_dto = FeedDTO(self.__feed.feed.link, self.__feed.feed.title_detail.base, self.__feed.feed.title, description, logo_url, self.__feed.feed.updated) # type: ignore\n        if self.__feed.entries:\n            emty = self.__feed.entries[0]\n            media_content = \"\"\n            # Kiểm tra thuộc tính 'media_content'",
        "detail": "src.bot.utils.read_rss_without_saving",
        "documentation": {}
    },
    {
        "label": "TextProcessor",
        "kind": 6,
        "importPath": "src.bot.utils.text_processor",
        "description": "src.bot.utils.text_processor",
        "peekOfCode": "class TextProcessor:\n    @staticmethod\n    def fix_surrogates(text: str) -> str:\n        # Convert surrogate pairs to characters\n        return re.sub(r'\\\\u(d[89ab][0-9a-f]{2})\\\\u(d[cdef][0-9a-f]{2})', \n                      lambda m: chr((int(m.group(1), 16) - 0xD800) * 0x400 + (int(m.group(2), 16) - 0xDC00) + 0x10000), text)\n    @staticmethod\n    def decode_unicode_escapes(text: str) -> str:\n        # Decode regular unicode escape sequences\n        return re.sub(r'\\\\u[0-9a-fA-F]{4}', ",
        "detail": "src.bot.utils.text_processor",
        "documentation": {}
    },
    {
        "label": "test_feed_emty",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_feed_emty():\n    print ('''\n           -- TEST FEED_EMTY --\n           ''')\n    feedEmtyBLL = FeedEmtyBLL()\n    feedBLL = FeedBLL()\n    emtyBLL = EmtyBLL()\n    feedDTO = FeedDTO(\"a\", \"a\", \"a\", \"a\", \"a\", \"a\")\n    feedBLL.insert_feed(feedDTO)\n    emtyDTO = EmtyDTO(\"a\", \"a\", \"a\", \"a\", \"a\")",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_channel_emty",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_channel_emty():\n    print ('''\n           -- TEST CHANNEL_EMTY --\n           ''')\n    channelEmtyBLL = ChannelEmtyBLL()\n    channelBLL = ChannelBLL()\n    emtyBLL = EmtyBLL()\n    channelDTO = ChannelDTO(\"a\", \"a\")\n    channelBLL.insert_channel(channelDTO)\n    emtyDTO = EmtyDTO(\"a\", \"a\", \"a\", \"a\", \"a\")",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_server_channel",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_server_channel():\n    print ('''\n           -- TEST SERVER_CHANNEL --\n           ''')\n    serverChannelBLL = ServerChannelBLL()\n    serverBLL = ServerBLL()\n    channelBLL = ChannelBLL()\n    serverDTO = ServerDTO(\"a\", \"a\")\n    serverBLL.insert_server(serverDTO)\n    channelDTO = ChannelDTO(\"a\", \"a\")",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_channel_feed",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_channel_feed():   \n    print ('''\n           -- TEST CHANNEL_FEED --\n           ''')\n    channelFeedBLL = ChannelFeedBLL()\n    channelBLL = ChannelBLL()\n    feedBLL = FeedBLL()\n    channelDTO = ChannelDTO(\"a\", \"a\")\n    channelBLL.insert_channel(channelDTO)\n    feedDTO = FeedDTO(\"a\", \"a\", \"a\", \"a\", \"a\", \"a\")",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_server_color",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_server_color():\n    print ('''\n           -- TEST SERVER_COLOR --\n           ''')\n    serverBLL = ServerBLL()\n    serverDTO = ServerDTO(\"b\", \"a\")\n    serverBLL.insert_server(serverDTO)\n    colorDTO = ColorDTO(\"RED\")\n    serverColorDTO = ServerColorDTO(serverDTO, colorDTO)\n    print(serverDTO)",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_read_rss",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_read_rss():\n    link_atom_feed = input(\"Nhập link atom feed: \")\n    read_rss = ReadRSS(link_atom_feed)\n    print(read_rss.get_link_first_entry()) \ndef test_text_processor():\n    text_processor = TextProcessor() \n    text = input(\"Nhập đoạn code chứa unicode escape: \")\n    text = text_processor.proccess_unicode_text(text)\n    print(text)\ndef test_server_pay_dal():",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_text_processor",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_text_processor():\n    text_processor = TextProcessor() \n    text = input(\"Nhập đoạn code chứa unicode escape: \")\n    text = text_processor.proccess_unicode_text(text)\n    print(text)\ndef test_server_pay_dal():\n    a = ServerPayDAL()\n    print(a.get_all_server_pay())\n    try:\n        a.insert_server_pay(ServerPayDTO('1234', True))",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_server_pay_dal",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_server_pay_dal():\n    a = ServerPayDAL()\n    print(a.get_all_server_pay())\n    try:\n        a.insert_server_pay(ServerPayDTO('1234', True))\n    except:\n        pass\n    print(a.get_all_server_pay())\n    print(a.get_server_pay_by_server_id('123456'))\n    print(a.delete_server_pay_by_id_server('1234'))",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "test_qr_pay_code",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def test_qr_pay_code():\n    a = QrPayCodeDAL()\n    print(a.get_all_qr_pay_code())\ntest_qr_pay_code()\n# test_server_pay_dal()",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    }
]